version: '1.0'
stages:
  - prepare
  - build
  - deploy
  - postdeploy

steps:

  #This file describes the deployment process for saas_notification

  main_clone:
    stage: prepare
    title: Cloning main repository...
    type: git-clone
    repo: '${{CF_REPO_OWNER}}/${{CF_REPO_NAME}}'
    revision: '${{CF_REVISION}}'
    git: github

  setup_variables:
    stage: prepare
    description: Sets variables for future steps
    image: alpine:latest
    working_directory: ${{main_clone}}
    commands:
      - export RJM_VERSION=$(cat ./VERSION)
      - export RJM_VERSION_UNDERSCORE=$(cat ./VERSION | tr '.' '_')
      - export RJM_MAJOR_VERSION=$(echo ${RJM_VERSION%%.*})
      - export RJM_WS_NAME=$(echo "saas_notification")
      - export RJM_DOCKER_SERVICE_NAME=${RJM_WS_NAME}_${RJM_VERSION_UNDERSCORE}
      - export RJM_DOCKER_SERVICE_URL=tasks.${RJM_WS_NAME}_${RJM_VERSION_UNDERSCORE}
      - export RJM_KONG_UPSTREAM_NAME=${RJM_WS_NAME}_${RJM_MAJOR_VERSION}
      - export RJM_DOCKERWSCALLER_IMAGE="metcarob/docker-ws-caller:0.7.17"
      - export RJM_UNITTESTAPICONTIANER_IMAGE="metcarob/python_unittest_api_container:0.0.9"
      - export RJM_DOCKER_KONG_API_URL="http://tasks.kong:8001"
      - export MEMSET_CLOUD_ROOT=/memset_cloud
      - export RJM_PYTHON_TEST_IMAGE="python:3.8.13-slim"
      - cf_export RJM_VERSION=${RJM_VERSION}
      - cf_export RJM_VERSION_UNDERSCORE=${RJM_VERSION_UNDERSCORE}
      - cf_export RJM_MAJOR_VERSION=${RJM_MAJOR_VERSION}
      - cf_export RJM_WS_NAME=${RJM_WS_NAME}
      - cf_export RJM_DOCKER_SERVICE_NAME=${RJM_DOCKER_SERVICE_NAME}
      - cf_export RJM_DOCKER_SERVICE_URL=${RJM_DOCKER_SERVICE_URL}
      - cf_export RJM_KONG_UPSTREAM_NAME=${RJM_KONG_UPSTREAM_NAME}
      - cf_export RJM_DOCKERWSCALLER_IMAGE=${RJM_DOCKERWSCALLER_IMAGE}
      - cf_export RJM_UNITTESTAPICONTIANER_IMAGE=${RJM_UNITTESTAPICONTIANER_IMAGE}
      - cf_export RJM_DOCKER_KONG_API_URL=${RJM_DOCKER_KONG_API_URL}
      - cf_export MEMSET_CLOUD_ROOT=${MEMSET_CLOUD_ROOT}
      - cf_export RJM_PYTHON_TEST_IMAGE="${RJM_PYTHON_TEST_IMAGE}"

  # These are the application unit tests
  unit_test:
    stage: deploy
    description: Make sure all the unit tests pass
    image: ${{RJM_PYTHON_TEST_IMAGE}}
    working_directory: ${{main_clone}}/services
    commands:
      - pip3 install --no-cache-dir -r ./src/requirements.txt
      - python3 -m pytest ./test

  build_the_image:
    stage: deploy
    working_directory: ${{main_clone}}
    type: build
    image_name: metcarob/${{RJM_WS_NAME}}
    tag: ${{RJM_VERSION}}

  free_disk_space:
    stage: deploy
    description: Free up disk space
    image: alpine:latest
    working_directory: ${{main_clone}}
    commands:
      - rm -rf ./webapp/node_modules
      - rm -rf ./webapp/dist

  #Deploy new container to my website swarm
  deploy_to_metcarob_swarm:
      stage: deploy
      image: codefresh/remote-docker
      working_directory: ${{main_clone}}
      commands:
        - rdocker ${{RDOCKER_HOST}} docker login -u ${{RJM_DOCKERHUB_USER}} -p ${{RJM_DOCKERHUB_PASS}} \&\& docker service create
          --with-registry-auth
          --name ${RJM_DOCKER_SERVICE_NAME}
          --network main_net
          --secret saas_jwtsecret
          -e APIAPP_APIURL=https://api.metcarob.com/saas_notification/v${{RJM_MAJOR_VERSION}}/public/api
          -e APIAPP_APIDOCSURL=https://api.metcarob.com/saas_notification/v${{RJM_MAJOR_VERSION}}/public/web/apidocs
          -e APIAPP_FRONTENDURL=https://api.metcarob.com/saas_notification/v${{RJM_MAJOR_VERSION}}/public/web/frontend
          -e APIAPP_COMMON_ACCESSCONTROLALLOWORIGIN="https://api.metcarob.com"
          -e APIAPP_JWTSECRETFILE=/run/secrets/saas_jwtsecret
          --secret saas_notification_mqclientconfig
          -e APIAPP_MQCLIENTCONFIGFILE=/run/secrets/saas_notification_mqclientconfig
          --secret saas_notification_config
          --secret monitor_check_temp_state_config
          -e APIAPP_CONFIGFILE=/run/secrets/saas_notification_config
          metcarob/${RJM_WS_NAME}:${RJM_VERSION}
      environment:
        - SSH_KEY=${{SSH_KEY_COMMAS}}
        - SSH_PORT=${{SSH_PORT}}
        - SPLIT_CHAR=${{SPLIT_CHAR}}

  run_terraform_setuptest:
    stage: deploy
    title: "Run terraform to setup test endpoints on memset..."
    description: Compile the frontend quasar application
    image: ${{RJM_DOCKERWSCALLER_IMAGE}}
    working_directory: ${{main_clone}}
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    commands:
      - transferDirectory ${{RDOCKER_HOST}} ./terraform/ ${{MEMSET_CLOUD_ROOT}}/data_to_backup/terraform/executions/${{RJM_WS_NAME}}
      - ssh -p ${{SSH_PORT}} -i ${HOME}/.ssh/id_rdocker -o StrictHostKeyChecking=no ${{RDOCKER_HOST}} ${{MEMSET_CLOUD_ROOT}}/scripts/update_terraform_deployment.sh  setup_test ${{MEMSET_CLOUD_ROOT}} ${{RJM_WS_NAME}} ${{RJM_VERSION}}
      - ssh -p ${{SSH_PORT}} -i ${HOME}/.ssh/id_rdocker -o StrictHostKeyChecking=no ${{RDOCKER_HOST}} ${{MEMSET_CLOUD_ROOT}}/scripts/execute_terraform.sh ${{MEMSET_CLOUD_ROOT}} ${{RJM_WS_NAME}}

  # rdockerinit directory required because it sets up .ssh/id_rdocker
  run_terraform_deploy:
    stage: deploy
    title: "Run terraform to deploy on memset..."
    description: Compile the frontend quasar application
    image: ${{RJM_DOCKERWSCALLER_IMAGE}}
    working_directory: ${{main_clone}}
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    commands:
      - rdockerinit
      - ssh -p ${{SSH_PORT}} -i ${HOME}/.ssh/id_rdocker -o StrictHostKeyChecking=no ${{RDOCKER_HOST}} ${{MEMSET_CLOUD_ROOT}}/scripts/update_terraform_deployment.sh  deploy ${{MEMSET_CLOUD_ROOT}} ${{RJM_WS_NAME}} ${{RJM_VERSION}}
      - ssh -p ${{SSH_PORT}} -i ${HOME}/.ssh/id_rdocker -o StrictHostKeyChecking=no ${{RDOCKER_HOST}} ${{MEMSET_CLOUD_ROOT}}/scripts/execute_terraform.sh ${{MEMSET_CLOUD_ROOT}} ${{RJM_WS_NAME}}

  approveCleanUpOldVersion:
    stage: postdeploy
    type: pending-approval
    title: Check prod version is working
    description: Check prod version ${{RJM_VERSION}} before continuing pipeline and destorying old versions
    timeout:
      duration: 2
      finalState: denied

  cleanUpOldVersion:
    stage: postdeploy
    image: codefresh/remote-docker
    working_directory: ${{main_clone}}
    commands:
      - rdocker ${{RDOCKER_HOST}} docker run --rm -it --network main_net --volume=/var/run:/var/run --entrypoint docker_service_remove_non_live
        ${{RJM_DOCKERWSCALLER_IMAGE}}
        ${{RJM_WS_NAME}}
        ${{RJM_VERSION}}
        metcarob/
    environment:
      - SSH_KEY=${{SSH_KEY_COMMAS}}
      - SSH_PORT=${{SSH_PORT}}
      - SPLIT_CHAR=${{SPLIT_CHAR}}
    when:
      steps:
      - name: approveCleanUpOldVersion
        on:
        - approved
    retry:
      maxAttempts: 2
      delay: 3
      exponentialFactor: 1
